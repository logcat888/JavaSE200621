package com.atguigu.java;

/**
 * @author chenhuiup
 * @create 2020-07-14 上午 8:44
 */
public class ComparableUtil {

}
/*
1	异常按照处理方式分为几种? 各包含哪些类?
主要两种分类方式：
    第一种：按照严重程度：
            >Error
            >Exception
    第二种：按照是否受检：
            >受检异常(check):Exception类及其子类，不包括RuntimeException，编译时异常，必须接受检查和处理的异常
            >非受检异常(uncheck):1.Error类及其子类；2.RuntimeException，运行时异常，不是必须检查的异常



2	判断
	1) 非受检异常就是必须不要处理的异常//false
	2) 受检异常就是可以处理的异常//false，必须处理
	3) 非受检异常是不必须处理的异常//true
	4) 受检异常可以对其忽略//false
	5) 无论是什么异常,都必须对其进行处理//false
	6) 只有受检异常会引起程序中断//false
	7) 受检异常是必须对其进行处理的异常//true
	8) 只有非受检异常会引起程序中断//f
	9) 异常处理只适用于受检异常//false
	10) 异常处理适用于所有异常, 包括Error //true

3	异常的处理有几种方式, 各是什么, 如何处理?
        主要分为3种：
    1.抓：
        try{
            可能出现异常的代码
        }catch(异常类型1 e){
            处理方式1
        }catch(异常类型2 e){
            处理方式2
        }
        ...
        finally{
            一定会被执行的代码
            作用：释放系统资源，与os相关
        }
     2.抛：
          方法标签： 返回值类型 方法名  throws 可能出现的异常列表，表示这个方法有风险，警告调用者(){
          产生异常对象： throw new 异常();
          }

     3.先捕获，再抛出（开发中比较常见）
     方法标签： 返回值类型 方法名  throws 可能出现的异常(){
        try{
            可能出现异常的代码
        }catch(异常类型1 e){
            throw new 通常是自定义异常(e); //异常关联
        }
      }

4	异常的处理选择有什么原则?
    直接会影响栈的存活的方法，尽量捕获异常
    方法出问题不会影响栈的方法，尽量抛出异常



5	方法覆盖条件中对于异常的描述是什么?
    子类抛出的受检异常不大于父类异常


 */